// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

#ifndef PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
#define PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace container {
namespace v1 {
class AddonsConfig;
class AddonsConfigDefaultTypeInternal;
extern AddonsConfigDefaultTypeInternal _AddonsConfig_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterUpdate;
class ClusterUpdateDefaultTypeInternal;
extern ClusterUpdateDefaultTypeInternal _ClusterUpdate_default_instance_;
class CreateClusterRequest;
class CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class DeleteClusterRequest;
class DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class GetClusterRequest;
class GetClusterRequestDefaultTypeInternal;
extern GetClusterRequestDefaultTypeInternal _GetClusterRequest_default_instance_;
class GetOperationRequest;
class GetOperationRequestDefaultTypeInternal;
extern GetOperationRequestDefaultTypeInternal _GetOperationRequest_default_instance_;
class GetServerConfigRequest;
class GetServerConfigRequestDefaultTypeInternal;
extern GetServerConfigRequestDefaultTypeInternal _GetServerConfigRequest_default_instance_;
class HorizontalPodAutoscaling;
class HorizontalPodAutoscalingDefaultTypeInternal;
extern HorizontalPodAutoscalingDefaultTypeInternal _HorizontalPodAutoscaling_default_instance_;
class HttpLoadBalancing;
class HttpLoadBalancingDefaultTypeInternal;
extern HttpLoadBalancingDefaultTypeInternal _HttpLoadBalancing_default_instance_;
class ListClustersRequest;
class ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListClustersResponse;
class ListClustersResponseDefaultTypeInternal;
extern ListClustersResponseDefaultTypeInternal _ListClustersResponse_default_instance_;
class ListOperationsRequest;
class ListOperationsRequestDefaultTypeInternal;
extern ListOperationsRequestDefaultTypeInternal _ListOperationsRequest_default_instance_;
class ListOperationsResponse;
class ListOperationsResponseDefaultTypeInternal;
extern ListOperationsResponseDefaultTypeInternal _ListOperationsResponse_default_instance_;
class MasterAuth;
class MasterAuthDefaultTypeInternal;
extern MasterAuthDefaultTypeInternal _MasterAuth_default_instance_;
class NodeConfig;
class NodeConfigDefaultTypeInternal;
extern NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class UpdateClusterRequest;
class UpdateClusterRequestDefaultTypeInternal;
extern UpdateClusterRequestDefaultTypeInternal _UpdateClusterRequest_default_instance_;
}  // namespace v1
}  // namespace container
}  // namespace google

namespace google {
namespace container {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
void protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

enum Cluster_Status {
  Cluster_Status_STATUS_UNSPECIFIED = 0,
  Cluster_Status_PROVISIONING = 1,
  Cluster_Status_RUNNING = 2,
  Cluster_Status_RECONCILING = 3,
  Cluster_Status_STOPPING = 4,
  Cluster_Status_ERROR = 5,
  Cluster_Status_Cluster_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cluster_Status_Cluster_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cluster_Status_IsValid(int value);
const Cluster_Status Cluster_Status_Status_MIN = Cluster_Status_STATUS_UNSPECIFIED;
const Cluster_Status Cluster_Status_Status_MAX = Cluster_Status_ERROR;
const int Cluster_Status_Status_ARRAYSIZE = Cluster_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cluster_Status_descriptor();
inline const ::std::string& Cluster_Status_Name(Cluster_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cluster_Status_descriptor(), value);
}
inline bool Cluster_Status_Parse(
    const ::std::string& name, Cluster_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cluster_Status>(
    Cluster_Status_descriptor(), name, value);
}
enum Operation_Status {
  Operation_Status_STATUS_UNSPECIFIED = 0,
  Operation_Status_PENDING = 1,
  Operation_Status_RUNNING = 2,
  Operation_Status_DONE = 3,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Status_IsValid(int value);
const Operation_Status Operation_Status_Status_MIN = Operation_Status_STATUS_UNSPECIFIED;
const Operation_Status Operation_Status_Status_MAX = Operation_Status_DONE;
const int Operation_Status_Status_ARRAYSIZE = Operation_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Status_descriptor();
inline const ::std::string& Operation_Status_Name(Operation_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Status_descriptor(), value);
}
inline bool Operation_Status_Parse(
    const ::std::string& name, Operation_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Status>(
    Operation_Status_descriptor(), name, value);
}
enum Operation_Type {
  Operation_Type_TYPE_UNSPECIFIED = 0,
  Operation_Type_CREATE_CLUSTER = 1,
  Operation_Type_DELETE_CLUSTER = 2,
  Operation_Type_UPGRADE_MASTER = 3,
  Operation_Type_UPGRADE_NODES = 4,
  Operation_Type_REPAIR_CLUSTER = 5,
  Operation_Type_UPDATE_CLUSTER = 6,
  Operation_Type_CREATE_NODE_POOL = 7,
  Operation_Type_DELETE_NODE_POOL = 8,
  Operation_Type_Operation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Type_Operation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Type_IsValid(int value);
const Operation_Type Operation_Type_Type_MIN = Operation_Type_TYPE_UNSPECIFIED;
const Operation_Type Operation_Type_Type_MAX = Operation_Type_DELETE_NODE_POOL;
const int Operation_Type_Type_ARRAYSIZE = Operation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor();
inline const ::std::string& Operation_Type_Name(Operation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Type_descriptor(), value);
}
inline bool Operation_Type_Parse(
    const ::std::string& name, Operation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Type>(
    Operation_Type_descriptor(), name, value);
}
// ===================================================================


// -------------------------------------------------------------------

class NodeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeConfig) */ {
 public:
  NodeConfig();
  virtual ~NodeConfig();

  NodeConfig(const NodeConfig& from);

  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConfig& default_instance();

  static inline const NodeConfig* internal_default_instance() {
    return reinterpret_cast<const NodeConfig*>(
               &_NodeConfig_default_instance_);
  }

  void Swap(NodeConfig* other);

  // implements Message ----------------------------------------------

  inline NodeConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // string machine_type = 1;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 1;
  const ::std::string& machine_type() const;
  void set_machine_type(const ::std::string& value);
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  ::std::string* mutable_machine_type();
  ::std::string* release_machine_type();
  void set_allocated_machine_type(::std::string* machine_type);

  // int32 disk_size_gb = 2;
  void clear_disk_size_gb();
  static const int kDiskSizeGbFieldNumber = 2;
  ::google::protobuf::int32 disk_size_gb() const;
  void set_disk_size_gb(::google::protobuf::int32 value);

  // repeated string oauth_scopes = 3;
  int oauth_scopes_size() const;
  void clear_oauth_scopes();
  static const int kOauthScopesFieldNumber = 3;
  const ::std::string& oauth_scopes(int index) const;
  ::std::string* mutable_oauth_scopes(int index);
  void set_oauth_scopes(int index, const ::std::string& value);
  void set_oauth_scopes(int index, const char* value);
  void set_oauth_scopes(int index, const char* value, size_t size);
  ::std::string* add_oauth_scopes();
  void add_oauth_scopes(const ::std::string& value);
  void add_oauth_scopes(const char* value);
  void add_oauth_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& oauth_scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_oauth_scopes();

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> oauth_scopes_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      NodeConfig_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_;
  ::google::protobuf::int32 disk_size_gb_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class MasterAuth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuth) */ {
 public:
  MasterAuth();
  virtual ~MasterAuth();

  MasterAuth(const MasterAuth& from);

  inline MasterAuth& operator=(const MasterAuth& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterAuth& default_instance();

  static inline const MasterAuth* internal_default_instance() {
    return reinterpret_cast<const MasterAuth*>(
               &_MasterAuth_default_instance_);
  }

  void Swap(MasterAuth* other);

  // implements Message ----------------------------------------------

  inline MasterAuth* New() const PROTOBUF_FINAL { return New(NULL); }

  MasterAuth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MasterAuth& from);
  void MergeFrom(const MasterAuth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MasterAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string cluster_ca_certificate = 100;
  void clear_cluster_ca_certificate();
  static const int kClusterCaCertificateFieldNumber = 100;
  const ::std::string& cluster_ca_certificate() const;
  void set_cluster_ca_certificate(const ::std::string& value);
  void set_cluster_ca_certificate(const char* value);
  void set_cluster_ca_certificate(const char* value, size_t size);
  ::std::string* mutable_cluster_ca_certificate();
  ::std::string* release_cluster_ca_certificate();
  void set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate);

  // string client_certificate = 101;
  void clear_client_certificate();
  static const int kClientCertificateFieldNumber = 101;
  const ::std::string& client_certificate() const;
  void set_client_certificate(const ::std::string& value);
  void set_client_certificate(const char* value);
  void set_client_certificate(const char* value, size_t size);
  ::std::string* mutable_client_certificate();
  ::std::string* release_client_certificate();
  void set_allocated_client_certificate(::std::string* client_certificate);

  // string client_key = 102;
  void clear_client_key();
  static const int kClientKeyFieldNumber = 102;
  const ::std::string& client_key() const;
  void set_client_key(const ::std::string& value);
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  ::std::string* mutable_client_key();
  ::std::string* release_client_key();
  void set_allocated_client_key(::std::string* client_key);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ca_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class AddonsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AddonsConfig) */ {
 public:
  AddonsConfig();
  virtual ~AddonsConfig();

  AddonsConfig(const AddonsConfig& from);

  inline AddonsConfig& operator=(const AddonsConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddonsConfig& default_instance();

  static inline const AddonsConfig* internal_default_instance() {
    return reinterpret_cast<const AddonsConfig*>(
               &_AddonsConfig_default_instance_);
  }

  void Swap(AddonsConfig* other);

  // implements Message ----------------------------------------------

  inline AddonsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AddonsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddonsConfig& from);
  void MergeFrom(const AddonsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddonsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  bool has_http_load_balancing() const;
  void clear_http_load_balancing();
  static const int kHttpLoadBalancingFieldNumber = 1;
  const ::google::container::v1::HttpLoadBalancing& http_load_balancing() const;
  ::google::container::v1::HttpLoadBalancing* mutable_http_load_balancing();
  ::google::container::v1::HttpLoadBalancing* release_http_load_balancing();
  void set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing);

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  bool has_horizontal_pod_autoscaling() const;
  void clear_horizontal_pod_autoscaling();
  static const int kHorizontalPodAutoscalingFieldNumber = 2;
  const ::google::container::v1::HorizontalPodAutoscaling& horizontal_pod_autoscaling() const;
  ::google::container::v1::HorizontalPodAutoscaling* mutable_horizontal_pod_autoscaling();
  ::google::container::v1::HorizontalPodAutoscaling* release_horizontal_pod_autoscaling();
  void set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling);

  // @@protoc_insertion_point(class_scope:google.container.v1.AddonsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::HttpLoadBalancing* http_load_balancing_;
  ::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class HttpLoadBalancing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HttpLoadBalancing) */ {
 public:
  HttpLoadBalancing();
  virtual ~HttpLoadBalancing();

  HttpLoadBalancing(const HttpLoadBalancing& from);

  inline HttpLoadBalancing& operator=(const HttpLoadBalancing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpLoadBalancing& default_instance();

  static inline const HttpLoadBalancing* internal_default_instance() {
    return reinterpret_cast<const HttpLoadBalancing*>(
               &_HttpLoadBalancing_default_instance_);
  }

  void Swap(HttpLoadBalancing* other);

  // implements Message ----------------------------------------------

  inline HttpLoadBalancing* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpLoadBalancing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpLoadBalancing& from);
  void MergeFrom(const HttpLoadBalancing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpLoadBalancing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HttpLoadBalancing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class HorizontalPodAutoscaling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HorizontalPodAutoscaling) */ {
 public:
  HorizontalPodAutoscaling();
  virtual ~HorizontalPodAutoscaling();

  HorizontalPodAutoscaling(const HorizontalPodAutoscaling& from);

  inline HorizontalPodAutoscaling& operator=(const HorizontalPodAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HorizontalPodAutoscaling& default_instance();

  static inline const HorizontalPodAutoscaling* internal_default_instance() {
    return reinterpret_cast<const HorizontalPodAutoscaling*>(
               &_HorizontalPodAutoscaling_default_instance_);
  }

  void Swap(HorizontalPodAutoscaling* other);

  // implements Message ----------------------------------------------

  inline HorizontalPodAutoscaling* New() const PROTOBUF_FINAL { return New(NULL); }

  HorizontalPodAutoscaling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HorizontalPodAutoscaling& from);
  void MergeFrom(const HorizontalPodAutoscaling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HorizontalPodAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HorizontalPodAutoscaling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Cluster_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Cluster_Status_STATUS_UNSPECIFIED;
  static const Status PROVISIONING =
    Cluster_Status_PROVISIONING;
  static const Status RUNNING =
    Cluster_Status_RUNNING;
  static const Status RECONCILING =
    Cluster_Status_RECONCILING;
  static const Status STOPPING =
    Cluster_Status_STOPPING;
  static const Status ERROR =
    Cluster_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Cluster_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Cluster_Status_Status_MIN;
  static const Status Status_MAX =
    Cluster_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Cluster_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Cluster_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Cluster_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Cluster_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 initial_node_count = 3;
  void clear_initial_node_count();
  static const int kInitialNodeCountFieldNumber = 3;
  ::google::protobuf::int32 initial_node_count() const;
  void set_initial_node_count(::google::protobuf::int32 value);

  // .google.container.v1.NodeConfig node_config = 4;
  bool has_node_config() const;
  void clear_node_config();
  static const int kNodeConfigFieldNumber = 4;
  const ::google::container::v1::NodeConfig& node_config() const;
  ::google::container::v1::NodeConfig* mutable_node_config();
  ::google::container::v1::NodeConfig* release_node_config();
  void set_allocated_node_config(::google::container::v1::NodeConfig* node_config);

  // .google.container.v1.MasterAuth master_auth = 5;
  bool has_master_auth() const;
  void clear_master_auth();
  static const int kMasterAuthFieldNumber = 5;
  const ::google::container::v1::MasterAuth& master_auth() const;
  ::google::container::v1::MasterAuth* mutable_master_auth();
  ::google::container::v1::MasterAuth* release_master_auth();
  void set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth);

  // string logging_service = 6;
  void clear_logging_service();
  static const int kLoggingServiceFieldNumber = 6;
  const ::std::string& logging_service() const;
  void set_logging_service(const ::std::string& value);
  void set_logging_service(const char* value);
  void set_logging_service(const char* value, size_t size);
  ::std::string* mutable_logging_service();
  ::std::string* release_logging_service();
  void set_allocated_logging_service(::std::string* logging_service);

  // string monitoring_service = 7;
  void clear_monitoring_service();
  static const int kMonitoringServiceFieldNumber = 7;
  const ::std::string& monitoring_service() const;
  void set_monitoring_service(const ::std::string& value);
  void set_monitoring_service(const char* value);
  void set_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_monitoring_service();
  ::std::string* release_monitoring_service();
  void set_allocated_monitoring_service(::std::string* monitoring_service);

  // string network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string cluster_ipv4_cidr = 9;
  void clear_cluster_ipv4_cidr();
  static const int kClusterIpv4CidrFieldNumber = 9;
  const ::std::string& cluster_ipv4_cidr() const;
  void set_cluster_ipv4_cidr(const ::std::string& value);
  void set_cluster_ipv4_cidr(const char* value);
  void set_cluster_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr();
  ::std::string* release_cluster_ipv4_cidr();
  void set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr);

  // .google.container.v1.AddonsConfig addons_config = 10;
  bool has_addons_config() const;
  void clear_addons_config();
  static const int kAddonsConfigFieldNumber = 10;
  const ::google::container::v1::AddonsConfig& addons_config() const;
  ::google::container::v1::AddonsConfig* mutable_addons_config();
  ::google::container::v1::AddonsConfig* release_addons_config();
  void set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config);

  // string subnetwork = 11;
  void clear_subnetwork();
  static const int kSubnetworkFieldNumber = 11;
  const ::std::string& subnetwork() const;
  void set_subnetwork(const ::std::string& value);
  void set_subnetwork(const char* value);
  void set_subnetwork(const char* value, size_t size);
  ::std::string* mutable_subnetwork();
  ::std::string* release_subnetwork();
  void set_allocated_subnetwork(::std::string* subnetwork);

  // string self_link = 100;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 100;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string zone = 101;
  void clear_zone();
  static const int kZoneFieldNumber = 101;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string endpoint = 102;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 102;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string initial_cluster_version = 103;
  void clear_initial_cluster_version();
  static const int kInitialClusterVersionFieldNumber = 103;
  const ::std::string& initial_cluster_version() const;
  void set_initial_cluster_version(const ::std::string& value);
  void set_initial_cluster_version(const char* value);
  void set_initial_cluster_version(const char* value, size_t size);
  ::std::string* mutable_initial_cluster_version();
  ::std::string* release_initial_cluster_version();
  void set_allocated_initial_cluster_version(::std::string* initial_cluster_version);

  // string current_master_version = 104;
  void clear_current_master_version();
  static const int kCurrentMasterVersionFieldNumber = 104;
  const ::std::string& current_master_version() const;
  void set_current_master_version(const ::std::string& value);
  void set_current_master_version(const char* value);
  void set_current_master_version(const char* value, size_t size);
  ::std::string* mutable_current_master_version();
  ::std::string* release_current_master_version();
  void set_allocated_current_master_version(::std::string* current_master_version);

  // string current_node_version = 105;
  void clear_current_node_version();
  static const int kCurrentNodeVersionFieldNumber = 105;
  const ::std::string& current_node_version() const;
  void set_current_node_version(const ::std::string& value);
  void set_current_node_version(const char* value);
  void set_current_node_version(const char* value, size_t size);
  ::std::string* mutable_current_node_version();
  ::std::string* release_current_node_version();
  void set_allocated_current_node_version(::std::string* current_node_version);

  // string create_time = 106;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 106;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // .google.container.v1.Cluster.Status status = 107;
  void clear_status();
  static const int kStatusFieldNumber = 107;
  ::google::container::v1::Cluster_Status status() const;
  void set_status(::google::container::v1::Cluster_Status value);

  // string status_message = 108;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 108;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // int32 node_ipv4_cidr_size = 109;
  void clear_node_ipv4_cidr_size();
  static const int kNodeIpv4CidrSizeFieldNumber = 109;
  ::google::protobuf::int32 node_ipv4_cidr_size() const;
  void set_node_ipv4_cidr_size(::google::protobuf::int32 value);

  // string services_ipv4_cidr = 110;
  void clear_services_ipv4_cidr();
  static const int kServicesIpv4CidrFieldNumber = 110;
  const ::std::string& services_ipv4_cidr() const;
  void set_services_ipv4_cidr(const ::std::string& value);
  void set_services_ipv4_cidr(const char* value);
  void set_services_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr();
  ::std::string* release_services_ipv4_cidr();
  void set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr);

  // repeated string instance_group_urls = 111;
  int instance_group_urls_size() const;
  void clear_instance_group_urls();
  static const int kInstanceGroupUrlsFieldNumber = 111;
  const ::std::string& instance_group_urls(int index) const;
  ::std::string* mutable_instance_group_urls(int index);
  void set_instance_group_urls(int index, const ::std::string& value);
  void set_instance_group_urls(int index, const char* value);
  void set_instance_group_urls(int index, const char* value, size_t size);
  ::std::string* add_instance_group_urls();
  void add_instance_group_urls(const ::std::string& value);
  void add_instance_group_urls(const char* value);
  void add_instance_group_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& instance_group_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_instance_group_urls();

  // int32 current_node_count = 112;
  void clear_current_node_count();
  static const int kCurrentNodeCountFieldNumber = 112;
  ::google::protobuf::int32 current_node_count() const;
  void set_current_node_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> instance_group_urls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr logging_service_;
  ::google::protobuf::internal::ArenaStringPtr monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr initial_cluster_version_;
  ::google::protobuf::internal::ArenaStringPtr current_master_version_;
  ::google::protobuf::internal::ArenaStringPtr current_node_version_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_;
  ::google::container::v1::NodeConfig* node_config_;
  ::google::container::v1::MasterAuth* master_auth_;
  ::google::container::v1::AddonsConfig* addons_config_;
  ::google::protobuf::int32 initial_node_count_;
  int status_;
  ::google::protobuf::int32 node_ipv4_cidr_size_;
  ::google::protobuf::int32 current_node_count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ClusterUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClusterUpdate) */ {
 public:
  ClusterUpdate();
  virtual ~ClusterUpdate();

  ClusterUpdate(const ClusterUpdate& from);

  inline ClusterUpdate& operator=(const ClusterUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterUpdate& default_instance();

  static inline const ClusterUpdate* internal_default_instance() {
    return reinterpret_cast<const ClusterUpdate*>(
               &_ClusterUpdate_default_instance_);
  }

  void Swap(ClusterUpdate* other);

  // implements Message ----------------------------------------------

  inline ClusterUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterUpdate& from);
  void MergeFrom(const ClusterUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string desired_node_version = 4;
  void clear_desired_node_version();
  static const int kDesiredNodeVersionFieldNumber = 4;
  const ::std::string& desired_node_version() const;
  void set_desired_node_version(const ::std::string& value);
  void set_desired_node_version(const char* value);
  void set_desired_node_version(const char* value, size_t size);
  ::std::string* mutable_desired_node_version();
  ::std::string* release_desired_node_version();
  void set_allocated_desired_node_version(::std::string* desired_node_version);

  // string desired_monitoring_service = 5;
  void clear_desired_monitoring_service();
  static const int kDesiredMonitoringServiceFieldNumber = 5;
  const ::std::string& desired_monitoring_service() const;
  void set_desired_monitoring_service(const ::std::string& value);
  void set_desired_monitoring_service(const char* value);
  void set_desired_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_desired_monitoring_service();
  ::std::string* release_desired_monitoring_service();
  void set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service);

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  bool has_desired_addons_config() const;
  void clear_desired_addons_config();
  static const int kDesiredAddonsConfigFieldNumber = 6;
  const ::google::container::v1::AddonsConfig& desired_addons_config() const;
  ::google::container::v1::AddonsConfig* mutable_desired_addons_config();
  ::google::container::v1::AddonsConfig* release_desired_addons_config();
  void set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config);

  // string desired_master_version = 100;
  void clear_desired_master_version();
  static const int kDesiredMasterVersionFieldNumber = 100;
  const ::std::string& desired_master_version() const;
  void set_desired_master_version(const ::std::string& value);
  void set_desired_master_version(const char* value);
  void set_desired_master_version(const char* value, size_t size);
  ::std::string* mutable_desired_master_version();
  ::std::string* release_desired_master_version();
  void set_allocated_desired_master_version(::std::string* desired_master_version);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClusterUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desired_node_version_;
  ::google::protobuf::internal::ArenaStringPtr desired_monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr desired_master_version_;
  ::google::container::v1::AddonsConfig* desired_addons_config_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  inline Operation* New() const PROTOBUF_FINAL { return New(NULL); }

  Operation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Operation_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Operation_Status_STATUS_UNSPECIFIED;
  static const Status PENDING =
    Operation_Status_PENDING;
  static const Status RUNNING =
    Operation_Status_RUNNING;
  static const Status DONE =
    Operation_Status_DONE;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Operation_Status_Status_MIN;
  static const Status Status_MAX =
    Operation_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Operation_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Operation_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Operation_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Operation_Status_Parse(name, value);
  }

  typedef Operation_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Operation_Type_TYPE_UNSPECIFIED;
  static const Type CREATE_CLUSTER =
    Operation_Type_CREATE_CLUSTER;
  static const Type DELETE_CLUSTER =
    Operation_Type_DELETE_CLUSTER;
  static const Type UPGRADE_MASTER =
    Operation_Type_UPGRADE_MASTER;
  static const Type UPGRADE_NODES =
    Operation_Type_UPGRADE_NODES;
  static const Type REPAIR_CLUSTER =
    Operation_Type_REPAIR_CLUSTER;
  static const Type UPDATE_CLUSTER =
    Operation_Type_UPDATE_CLUSTER;
  static const Type CREATE_NODE_POOL =
    Operation_Type_CREATE_NODE_POOL;
  static const Type DELETE_NODE_POOL =
    Operation_Type_DELETE_NODE_POOL;
  static inline bool Type_IsValid(int value) {
    return Operation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Operation_Type_Type_MIN;
  static const Type Type_MAX =
    Operation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Operation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Operation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Operation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Operation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // .google.container.v1.Operation.Type operation_type = 3;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 3;
  ::google::container::v1::Operation_Type operation_type() const;
  void set_operation_type(::google::container::v1::Operation_Type value);

  // .google.container.v1.Operation.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::container::v1::Operation_Status status() const;
  void set_status(::google::container::v1::Operation_Status value);

  // string detail = 8;
  void clear_detail();
  static const int kDetailFieldNumber = 8;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // string status_message = 5;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 5;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // string self_link = 6;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 6;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string target_link = 7;
  void clear_target_link();
  static const int kTargetLinkFieldNumber = 7;
  const ::std::string& target_link() const;
  void set_target_link(const ::std::string& value);
  void set_target_link(const char* value);
  void set_target_link(const char* value, size_t size);
  ::std::string* mutable_target_link();
  ::std::string* release_target_link();
  void set_allocated_target_link(::std::string* target_link);

  // @@protoc_insertion_point(class_scope:google.container.v1.Operation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr target_link_;
  int operation_type_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class CreateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CreateClusterRequest) */ {
 public:
  CreateClusterRequest();
  virtual ~CreateClusterRequest();

  CreateClusterRequest(const CreateClusterRequest& from);

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClusterRequest& default_instance();

  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }

  void Swap(CreateClusterRequest* other);

  // implements Message ----------------------------------------------

  inline CreateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateClusterRequest& from);
  void MergeFrom(const CreateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // .google.container.v1.Cluster cluster = 3;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::google::container::v1::Cluster& cluster() const;
  ::google::container::v1::Cluster* mutable_cluster();
  ::google::container::v1::Cluster* release_cluster();
  void set_allocated_cluster(::google::container::v1::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:google.container.v1.CreateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::container::v1::Cluster* cluster_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class GetClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetClusterRequest) */ {
 public:
  GetClusterRequest();
  virtual ~GetClusterRequest();

  GetClusterRequest(const GetClusterRequest& from);

  inline GetClusterRequest& operator=(const GetClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterRequest& default_instance();

  static inline const GetClusterRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterRequest*>(
               &_GetClusterRequest_default_instance_);
  }

  void Swap(GetClusterRequest* other);

  // implements Message ----------------------------------------------

  inline GetClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetClusterRequest& from);
  void MergeFrom(const GetClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class UpdateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateClusterRequest) */ {
 public:
  UpdateClusterRequest();
  virtual ~UpdateClusterRequest();

  UpdateClusterRequest(const UpdateClusterRequest& from);

  inline UpdateClusterRequest& operator=(const UpdateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateClusterRequest& default_instance();

  static inline const UpdateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterRequest*>(
               &_UpdateClusterRequest_default_instance_);
  }

  void Swap(UpdateClusterRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateClusterRequest& from);
  void MergeFrom(const UpdateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.ClusterUpdate update = 4;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 4;
  const ::google::container::v1::ClusterUpdate& update() const;
  ::google::container::v1::ClusterUpdate* mutable_update();
  ::google::container::v1::ClusterUpdate* release_update();
  void set_allocated_update(::google::container::v1::ClusterUpdate* update);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::ClusterUpdate* update_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class DeleteClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DeleteClusterRequest) */ {
 public:
  DeleteClusterRequest();
  virtual ~DeleteClusterRequest();

  DeleteClusterRequest(const DeleteClusterRequest& from);

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterRequest& default_instance();

  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }

  void Swap(DeleteClusterRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterRequest& from);
  void MergeFrom(const DeleteClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.DeleteClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ListClustersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersRequest) */ {
 public:
  ListClustersRequest();
  virtual ~ListClustersRequest();

  ListClustersRequest(const ListClustersRequest& from);

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersRequest& default_instance();

  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }

  void Swap(ListClustersRequest* other);

  // implements Message ----------------------------------------------

  inline ListClustersRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersRequest& from);
  void MergeFrom(const ListClustersRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ListClustersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersResponse) */ {
 public:
  ListClustersResponse();
  virtual ~ListClustersResponse();

  ListClustersResponse(const ListClustersResponse& from);

  inline ListClustersResponse& operator=(const ListClustersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersResponse& default_instance();

  static inline const ListClustersResponse* internal_default_instance() {
    return reinterpret_cast<const ListClustersResponse*>(
               &_ListClustersResponse_default_instance_);
  }

  void Swap(ListClustersResponse* other);

  // implements Message ----------------------------------------------

  inline ListClustersResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersResponse& from);
  void MergeFrom(const ListClustersResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Cluster clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  const ::google::container::v1::Cluster& clusters(int index) const;
  ::google::container::v1::Cluster* mutable_clusters(int index);
  ::google::container::v1::Cluster* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
      clusters() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster > clusters_;
  ::google::protobuf::RepeatedPtrField< ::std::string> missing_zones_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class GetOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetOperationRequest) */ {
 public:
  GetOperationRequest();
  virtual ~GetOperationRequest();

  GetOperationRequest(const GetOperationRequest& from);

  inline GetOperationRequest& operator=(const GetOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOperationRequest& default_instance();

  static inline const GetOperationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationRequest*>(
               &_GetOperationRequest_default_instance_);
  }

  void Swap(GetOperationRequest* other);

  // implements Message ----------------------------------------------

  inline GetOperationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOperationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOperationRequest& from);
  void MergeFrom(const GetOperationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string operation_id = 3;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 3;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ListOperationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsRequest) */ {
 public:
  ListOperationsRequest();
  virtual ~ListOperationsRequest();

  ListOperationsRequest(const ListOperationsRequest& from);

  inline ListOperationsRequest& operator=(const ListOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOperationsRequest& default_instance();

  static inline const ListOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListOperationsRequest*>(
               &_ListOperationsRequest_default_instance_);
  }

  void Swap(ListOperationsRequest* other);

  // implements Message ----------------------------------------------

  inline ListOperationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListOperationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListOperationsRequest& from);
  void MergeFrom(const ListOperationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListOperationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ListOperationsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsResponse) */ {
 public:
  ListOperationsResponse();
  virtual ~ListOperationsResponse();

  ListOperationsResponse(const ListOperationsResponse& from);

  inline ListOperationsResponse& operator=(const ListOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOperationsResponse& default_instance();

  static inline const ListOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListOperationsResponse*>(
               &_ListOperationsResponse_default_instance_);
  }

  void Swap(ListOperationsResponse* other);

  // implements Message ----------------------------------------------

  inline ListOperationsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListOperationsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListOperationsResponse& from);
  void MergeFrom(const ListOperationsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListOperationsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Operation operations = 1;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 1;
  const ::google::container::v1::Operation& operations(int index) const;
  ::google::container::v1::Operation* mutable_operations(int index);
  ::google::container::v1::Operation* add_operations();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
      mutable_operations();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
      operations() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation > operations_;
  ::google::protobuf::RepeatedPtrField< ::std::string> missing_zones_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class GetServerConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetServerConfigRequest) */ {
 public:
  GetServerConfigRequest();
  virtual ~GetServerConfigRequest();

  GetServerConfigRequest(const GetServerConfigRequest& from);

  inline GetServerConfigRequest& operator=(const GetServerConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerConfigRequest& default_instance();

  static inline const GetServerConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerConfigRequest*>(
               &_GetServerConfigRequest_default_instance_);
  }

  void Swap(GetServerConfigRequest* other);

  // implements Message ----------------------------------------------

  inline GetServerConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerConfigRequest& from);
  void MergeFrom(const GetServerConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetServerConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string default_cluster_version = 1;
  void clear_default_cluster_version();
  static const int kDefaultClusterVersionFieldNumber = 1;
  const ::std::string& default_cluster_version() const;
  void set_default_cluster_version(const ::std::string& value);
  void set_default_cluster_version(const char* value);
  void set_default_cluster_version(const char* value, size_t size);
  ::std::string* mutable_default_cluster_version();
  ::std::string* release_default_cluster_version();
  void set_allocated_default_cluster_version(::std::string* default_cluster_version);

  // repeated string valid_node_versions = 3;
  int valid_node_versions_size() const;
  void clear_valid_node_versions();
  static const int kValidNodeVersionsFieldNumber = 3;
  const ::std::string& valid_node_versions(int index) const;
  ::std::string* mutable_valid_node_versions(int index);
  void set_valid_node_versions(int index, const ::std::string& value);
  void set_valid_node_versions(int index, const char* value);
  void set_valid_node_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_node_versions();
  void add_valid_node_versions(const ::std::string& value);
  void add_valid_node_versions(const char* value);
  void add_valid_node_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valid_node_versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valid_node_versions();

  // @@protoc_insertion_point(class_scope:google.container.v1.ServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valid_node_versions_;
  ::google::protobuf::internal::ArenaStringPtr default_cluster_version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
  friend void protobuf_ShutdownFile_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// NodeConfig

// string machine_type = 1;
inline void NodeConfig::clear_machine_type() {
  machine_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.machine_type)
  return machine_type_.GetNoArena();
}
inline void NodeConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.machine_type)
}
inline void NodeConfig::set_machine_type(const char* value) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.machine_type)
}
inline void NodeConfig::set_machine_type(const char* value, size_t size) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.machine_type)
}
inline ::std::string* NodeConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.machine_type)
  return machine_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.machine_type)
  
  return machine_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.machine_type)
}

// int32 disk_size_gb = 2;
inline void NodeConfig::clear_disk_size_gb() {
  disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 NodeConfig::disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.disk_size_gb)
  return disk_size_gb_;
}
inline void NodeConfig::set_disk_size_gb(::google::protobuf::int32 value) {
  
  disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.disk_size_gb)
}

// repeated string oauth_scopes = 3;
inline int NodeConfig::oauth_scopes_size() const {
  return oauth_scopes_.size();
}
inline void NodeConfig::clear_oauth_scopes() {
  oauth_scopes_.Clear();
}
inline const ::std::string& NodeConfig::oauth_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Get(index);
}
inline ::std::string* NodeConfig::mutable_oauth_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Mutable(index);
}
inline void NodeConfig::set_oauth_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(value);
}
inline void NodeConfig::set_oauth_scopes(int index, const char* value) {
  oauth_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::set_oauth_scopes(int index, const char* value, size_t size) {
  oauth_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline ::std::string* NodeConfig::add_oauth_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Add();
}
inline void NodeConfig::add_oauth_scopes(const ::std::string& value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::add_oauth_scopes(const char* value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::add_oauth_scopes(const char* value, size_t size) {
  oauth_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::oauth_scopes() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_oauth_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.oauth_scopes)
  return &oauth_scopes_;
}

// map<string, string> metadata = 4;
inline int NodeConfig::metadata_size() const {
  return metadata_.size();
}
inline void NodeConfig::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// MasterAuth

// string username = 1;
inline void MasterAuth::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::username() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.username)
  return username_.GetNoArena();
}
inline void MasterAuth::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.username)
}
inline void MasterAuth::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.username)
}
inline void MasterAuth::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.username)
}
inline ::std::string* MasterAuth::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_username() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.username)
}

// string password = 2;
inline void MasterAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::password() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.password)
  return password_.GetNoArena();
}
inline void MasterAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.password)
}
inline void MasterAuth::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.password)
}
inline void MasterAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.password)
}
inline ::std::string* MasterAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_password() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.password)
}

// string cluster_ca_certificate = 100;
inline void MasterAuth::clear_cluster_ca_certificate() {
  cluster_ca_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::cluster_ca_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.GetNoArena();
}
inline void MasterAuth::set_cluster_ca_certificate(const ::std::string& value) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline void MasterAuth::set_cluster_ca_certificate(const char* value) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline void MasterAuth::set_cluster_ca_certificate(const char* value, size_t size) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline ::std::string* MasterAuth::mutable_cluster_ca_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_cluster_ca_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.cluster_ca_certificate)
  
  return cluster_ca_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate) {
  if (cluster_ca_certificate != NULL) {
    
  } else {
    
  }
  cluster_ca_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ca_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.cluster_ca_certificate)
}

// string client_certificate = 101;
inline void MasterAuth::clear_client_certificate() {
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.GetNoArena();
}
inline void MasterAuth::set_client_certificate(const ::std::string& value) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_certificate)
}
inline void MasterAuth::set_client_certificate(const char* value) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_certificate)
}
inline void MasterAuth::set_client_certificate(const char* value, size_t size) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_certificate)
}
inline ::std::string* MasterAuth::mutable_client_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate)
  
  return client_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_certificate(::std::string* client_certificate) {
  if (client_certificate != NULL) {
    
  } else {
    
  }
  client_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate)
}

// string client_key = 102;
inline void MasterAuth::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_key)
  return client_key_.GetNoArena();
}
inline void MasterAuth::set_client_key(const ::std::string& value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_key)
}
inline void MasterAuth::set_client_key(const char* value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_key)
}
inline void MasterAuth::set_client_key(const char* value, size_t size) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_key)
}
inline ::std::string* MasterAuth::mutable_client_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_key)
  
  return client_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_key(::std::string* client_key) {
  if (client_key != NULL) {
    
  } else {
    
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_key)
}

// -------------------------------------------------------------------

// AddonsConfig

// .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
inline bool AddonsConfig::has_http_load_balancing() const {
  return this != internal_default_instance() && http_load_balancing_ != NULL;
}
inline void AddonsConfig::clear_http_load_balancing() {
  if (GetArenaNoVirtual() == NULL && http_load_balancing_ != NULL) delete http_load_balancing_;
  http_load_balancing_ = NULL;
}
inline const ::google::container::v1::HttpLoadBalancing& AddonsConfig::http_load_balancing() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_ != NULL ? *http_load_balancing_
                         : *::google::container::v1::HttpLoadBalancing::internal_default_instance();
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::mutable_http_load_balancing() {
  
  if (http_load_balancing_ == NULL) {
    http_load_balancing_ = new ::google::container::v1::HttpLoadBalancing;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_;
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::release_http_load_balancing() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.http_load_balancing)
  
  ::google::container::v1::HttpLoadBalancing* temp = http_load_balancing_;
  http_load_balancing_ = NULL;
  return temp;
}
inline void AddonsConfig::set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing) {
  delete http_load_balancing_;
  http_load_balancing_ = http_load_balancing;
  if (http_load_balancing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.http_load_balancing)
}

// .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
inline bool AddonsConfig::has_horizontal_pod_autoscaling() const {
  return this != internal_default_instance() && horizontal_pod_autoscaling_ != NULL;
}
inline void AddonsConfig::clear_horizontal_pod_autoscaling() {
  if (GetArenaNoVirtual() == NULL && horizontal_pod_autoscaling_ != NULL) delete horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = NULL;
}
inline const ::google::container::v1::HorizontalPodAutoscaling& AddonsConfig::horizontal_pod_autoscaling() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_ != NULL ? *horizontal_pod_autoscaling_
                         : *::google::container::v1::HorizontalPodAutoscaling::internal_default_instance();
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::mutable_horizontal_pod_autoscaling() {
  
  if (horizontal_pod_autoscaling_ == NULL) {
    horizontal_pod_autoscaling_ = new ::google::container::v1::HorizontalPodAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_;
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::release_horizontal_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  
  ::google::container::v1::HorizontalPodAutoscaling* temp = horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = NULL;
  return temp;
}
inline void AddonsConfig::set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling) {
  delete horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = horizontal_pod_autoscaling;
  if (horizontal_pod_autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
}

// -------------------------------------------------------------------

// HttpLoadBalancing

// bool disabled = 1;
inline void HttpLoadBalancing::clear_disabled() {
  disabled_ = false;
}
inline bool HttpLoadBalancing::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HttpLoadBalancing.disabled)
  return disabled_;
}
inline void HttpLoadBalancing::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HttpLoadBalancing.disabled)
}

// -------------------------------------------------------------------

// HorizontalPodAutoscaling

// bool disabled = 1;
inline void HorizontalPodAutoscaling::clear_disabled() {
  disabled_ = false;
}
inline bool HorizontalPodAutoscaling::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HorizontalPodAutoscaling.disabled)
  return disabled_;
}
inline void HorizontalPodAutoscaling::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HorizontalPodAutoscaling.disabled)
}

// -------------------------------------------------------------------

// Cluster

// string name = 1;
inline void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.name)
  return name_.GetNoArena();
}
inline void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.name)
}
inline void Cluster::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.name)
}
inline void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.name)
}
inline ::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.name)
}

// string description = 2;
inline void Cluster::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.description)
  return description_.GetNoArena();
}
inline void Cluster::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.description)
}
inline void Cluster::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.description)
}
inline void Cluster::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.description)
}
inline ::std::string* Cluster::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.description)
}

// int32 initial_node_count = 3;
inline void Cluster::clear_initial_node_count() {
  initial_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_node_count)
  return initial_node_count_;
}
inline void Cluster::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_node_count)
}

// .google.container.v1.NodeConfig node_config = 4;
inline bool Cluster::has_node_config() const {
  return this != internal_default_instance() && node_config_ != NULL;
}
inline void Cluster::clear_node_config() {
  if (GetArenaNoVirtual() == NULL && node_config_ != NULL) delete node_config_;
  node_config_ = NULL;
}
inline const ::google::container::v1::NodeConfig& Cluster::node_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_config)
  return node_config_ != NULL ? *node_config_
                         : *::google::container::v1::NodeConfig::internal_default_instance();
}
inline ::google::container::v1::NodeConfig* Cluster::mutable_node_config() {
  
  if (node_config_ == NULL) {
    node_config_ = new ::google::container::v1::NodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_config)
  return node_config_;
}
inline ::google::container::v1::NodeConfig* Cluster::release_node_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.node_config)
  
  ::google::container::v1::NodeConfig* temp = node_config_;
  node_config_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_node_config(::google::container::v1::NodeConfig* node_config) {
  delete node_config_;
  node_config_ = node_config;
  if (node_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.node_config)
}

// .google.container.v1.MasterAuth master_auth = 5;
inline bool Cluster::has_master_auth() const {
  return this != internal_default_instance() && master_auth_ != NULL;
}
inline void Cluster::clear_master_auth() {
  if (GetArenaNoVirtual() == NULL && master_auth_ != NULL) delete master_auth_;
  master_auth_ = NULL;
}
inline const ::google::container::v1::MasterAuth& Cluster::master_auth() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_auth)
  return master_auth_ != NULL ? *master_auth_
                         : *::google::container::v1::MasterAuth::internal_default_instance();
}
inline ::google::container::v1::MasterAuth* Cluster::mutable_master_auth() {
  
  if (master_auth_ == NULL) {
    master_auth_ = new ::google::container::v1::MasterAuth;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_auth)
  return master_auth_;
}
inline ::google::container::v1::MasterAuth* Cluster::release_master_auth() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_auth)
  
  ::google::container::v1::MasterAuth* temp = master_auth_;
  master_auth_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth) {
  delete master_auth_;
  master_auth_ = master_auth;
  if (master_auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_auth)
}

// string logging_service = 6;
inline void Cluster::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.logging_service)
  return logging_service_.GetNoArena();
}
inline void Cluster::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.logging_service)
}
inline void Cluster::set_logging_service(const char* value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.logging_service)
}
inline void Cluster::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.logging_service)
}
inline ::std::string* Cluster::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != NULL) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.logging_service)
}

// string monitoring_service = 7;
inline void Cluster::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.GetNoArena();
}
inline void Cluster::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.monitoring_service)
}
inline void Cluster::set_monitoring_service(const char* value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.monitoring_service)
}
inline void Cluster::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.monitoring_service)
}
inline ::std::string* Cluster::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != NULL) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.monitoring_service)
}

// string network = 8;
inline void Cluster::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network)
  return network_.GetNoArena();
}
inline void Cluster::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.network)
}
inline void Cluster::set_network(const char* value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.network)
}
inline void Cluster::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.network)
}
inline ::std::string* Cluster::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network)
}

// string cluster_ipv4_cidr = 9;
inline void Cluster::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline void Cluster::set_cluster_ipv4_cidr(const char* value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline void Cluster::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.cluster_ipv4_cidr)
}

// .google.container.v1.AddonsConfig addons_config = 10;
inline bool Cluster::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != NULL;
}
inline void Cluster::clear_addons_config() {
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) delete addons_config_;
  addons_config_ = NULL;
}
inline const ::google::container::v1::AddonsConfig& Cluster::addons_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.addons_config)
  return addons_config_ != NULL ? *addons_config_
                         : *::google::container::v1::AddonsConfig::internal_default_instance();
}
inline ::google::container::v1::AddonsConfig* Cluster::mutable_addons_config() {
  
  if (addons_config_ == NULL) {
    addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.addons_config)
  return addons_config_;
}
inline ::google::container::v1::AddonsConfig* Cluster::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  delete addons_config_;
  addons_config_ = addons_config;
  if (addons_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.addons_config)
}

// string subnetwork = 11;
inline void Cluster::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.subnetwork)
  return subnetwork_.GetNoArena();
}
inline void Cluster::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.subnetwork)
}
inline void Cluster::set_subnetwork(const char* value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.subnetwork)
}
inline void Cluster::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.subnetwork)
}
inline ::std::string* Cluster::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != NULL) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.subnetwork)
}

// string self_link = 100;
inline void Cluster::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.self_link)
  return self_link_.GetNoArena();
}
inline void Cluster::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.self_link)
}
inline void Cluster::set_self_link(const char* value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.self_link)
}
inline void Cluster::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.self_link)
}
inline ::std::string* Cluster::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.self_link)
}

// string zone = 101;
inline void Cluster::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.zone)
  return zone_.GetNoArena();
}
inline void Cluster::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.zone)
}
inline void Cluster::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.zone)
}
inline void Cluster::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.zone)
}
inline ::std::string* Cluster::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.zone)
}

// string endpoint = 102;
inline void Cluster::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.endpoint)
  return endpoint_.GetNoArena();
}
inline void Cluster::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.endpoint)
}
inline void Cluster::set_endpoint(const char* value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.endpoint)
}
inline void Cluster::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.endpoint)
}
inline ::std::string* Cluster::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.endpoint)
}

// string initial_cluster_version = 103;
inline void Cluster::clear_initial_cluster_version() {
  initial_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::initial_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.GetNoArena();
}
inline void Cluster::set_initial_cluster_version(const ::std::string& value) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_cluster_version)
}
inline void Cluster::set_initial_cluster_version(const char* value) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.initial_cluster_version)
}
inline void Cluster::set_initial_cluster_version(const char* value, size_t size) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.initial_cluster_version)
}
inline ::std::string* Cluster::mutable_initial_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_initial_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.initial_cluster_version)
  
  return initial_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_initial_cluster_version(::std::string* initial_cluster_version) {
  if (initial_cluster_version != NULL) {
    
  } else {
    
  }
  initial_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.initial_cluster_version)
}

// string current_master_version = 104;
inline void Cluster::clear_current_master_version() {
  current_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_master_version)
  return current_master_version_.GetNoArena();
}
inline void Cluster::set_current_master_version(const ::std::string& value) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_master_version)
}
inline void Cluster::set_current_master_version(const char* value) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_master_version)
}
inline void Cluster::set_current_master_version(const char* value, size_t size) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_master_version)
}
inline ::std::string* Cluster::mutable_current_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_master_version)
  return current_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_master_version)
  
  return current_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_master_version(::std::string* current_master_version) {
  if (current_master_version != NULL) {
    
  } else {
    
  }
  current_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_master_version)
}

// string current_node_version = 105;
inline void Cluster::clear_current_node_version() {
  current_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_version)
  return current_node_version_.GetNoArena();
}
inline void Cluster::set_current_node_version(const ::std::string& value) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_version)
}
inline void Cluster::set_current_node_version(const char* value) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_node_version)
}
inline void Cluster::set_current_node_version(const char* value, size_t size) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_node_version)
}
inline ::std::string* Cluster::mutable_current_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_node_version)
  return current_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_node_version)
  
  return current_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_node_version(::std::string* current_node_version) {
  if (current_node_version != NULL) {
    
  } else {
    
  }
  current_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_node_version)
}

// string create_time = 106;
inline void Cluster::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::create_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.create_time)
  return create_time_.GetNoArena();
}
inline void Cluster::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.create_time)
}
inline void Cluster::set_create_time(const char* value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.create_time)
}
inline void Cluster::set_create_time(const char* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.create_time)
}
inline ::std::string* Cluster::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_create_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.create_time)
}

// .google.container.v1.Cluster.Status status = 107;
inline void Cluster::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Cluster_Status Cluster::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status)
  return static_cast< ::google::container::v1::Cluster_Status >(status_);
}
inline void Cluster::set_status(::google::container::v1::Cluster_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status)
}

// string status_message = 108;
inline void Cluster::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status_message)
  return status_message_.GetNoArena();
}
inline void Cluster::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status_message)
}
inline void Cluster::set_status_message(const char* value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.status_message)
}
inline void Cluster::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.status_message)
}
inline ::std::string* Cluster::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.status_message)
}

// int32 node_ipv4_cidr_size = 109;
inline void Cluster::clear_node_ipv4_cidr_size() {
  node_ipv4_cidr_size_ = 0;
}
inline ::google::protobuf::int32 Cluster::node_ipv4_cidr_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_ipv4_cidr_size)
  return node_ipv4_cidr_size_;
}
inline void Cluster::set_node_ipv4_cidr_size(::google::protobuf::int32 value) {
  
  node_ipv4_cidr_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.node_ipv4_cidr_size)
}

// string services_ipv4_cidr = 110;
inline void Cluster::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.services_ipv4_cidr)
}
inline void Cluster::set_services_ipv4_cidr(const char* value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.services_ipv4_cidr)
}
inline void Cluster::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.services_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.services_ipv4_cidr)
}

// repeated string instance_group_urls = 111;
inline int Cluster::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
inline void Cluster::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
inline const ::std::string& Cluster::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Get(index);
}
inline ::std::string* Cluster::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
inline void Cluster::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
inline void Cluster::set_instance_group_urls(int index, const char* value) {
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline ::std::string* Cluster::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Add();
}
inline void Cluster::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::add_instance_group_urls(const char* value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cluster::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Cluster::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.instance_group_urls)
  return &instance_group_urls_;
}

// int32 current_node_count = 112;
inline void Cluster::clear_current_node_count() {
  current_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::current_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_count)
  return current_node_count_;
}
inline void Cluster::set_current_node_count(::google::protobuf::int32 value) {
  
  current_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_count)
}

// -------------------------------------------------------------------

// ClusterUpdate

// string desired_node_version = 4;
inline void ClusterUpdate::clear_desired_node_version() {
  desired_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_node_version(const ::std::string& value) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_version)
}
inline void ClusterUpdate::set_desired_node_version(const char* value) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_version)
}
inline void ClusterUpdate::set_desired_node_version(const char* value, size_t size) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_version)
  
  return desired_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_node_version(::std::string* desired_node_version) {
  if (desired_node_version != NULL) {
    
  } else {
    
  }
  desired_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_version)
}

// string desired_monitoring_service = 5;
inline void ClusterUpdate::clear_desired_monitoring_service() {
  desired_monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.GetNoArena();
}
inline void ClusterUpdate::set_desired_monitoring_service(const ::std::string& value) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline void ClusterUpdate::set_desired_monitoring_service(const char* value) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline void ClusterUpdate::set_desired_monitoring_service(const char* value, size_t size) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline ::std::string* ClusterUpdate::mutable_desired_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_monitoring_service)
  
  return desired_monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service) {
  if (desired_monitoring_service != NULL) {
    
  } else {
    
  }
  desired_monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_monitoring_service)
}

// .google.container.v1.AddonsConfig desired_addons_config = 6;
inline bool ClusterUpdate::has_desired_addons_config() const {
  return this != internal_default_instance() && desired_addons_config_ != NULL;
}
inline void ClusterUpdate::clear_desired_addons_config() {
  if (GetArenaNoVirtual() == NULL && desired_addons_config_ != NULL) delete desired_addons_config_;
  desired_addons_config_ = NULL;
}
inline const ::google::container::v1::AddonsConfig& ClusterUpdate::desired_addons_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_ != NULL ? *desired_addons_config_
                         : *::google::container::v1::AddonsConfig::internal_default_instance();
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::mutable_desired_addons_config() {
  
  if (desired_addons_config_ == NULL) {
    desired_addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_;
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::release_desired_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_addons_config)
  
  ::google::container::v1::AddonsConfig* temp = desired_addons_config_;
  desired_addons_config_ = NULL;
  return temp;
}
inline void ClusterUpdate::set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config) {
  delete desired_addons_config_;
  desired_addons_config_ = desired_addons_config;
  if (desired_addons_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_addons_config)
}

// string desired_master_version = 100;
inline void ClusterUpdate::clear_desired_master_version() {
  desired_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_master_version(const ::std::string& value) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_master_version)
}
inline void ClusterUpdate::set_desired_master_version(const char* value) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_master_version)
}
inline void ClusterUpdate::set_desired_master_version(const char* value, size_t size) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_master_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_version)
  
  return desired_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_master_version(::std::string* desired_master_version) {
  if (desired_master_version != NULL) {
    
  } else {
    
  }
  desired_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_version)
}

// -------------------------------------------------------------------

// Operation

// string name = 1;
inline void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.name)
  return name_.GetNoArena();
}
inline void Operation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.name)
}
inline void Operation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.name)
}
inline void Operation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.name)
}
inline ::std::string* Operation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.name)
}

// string zone = 2;
inline void Operation::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.zone)
  return zone_.GetNoArena();
}
inline void Operation::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.zone)
}
inline void Operation::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.zone)
}
inline void Operation::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.zone)
}
inline ::std::string* Operation::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.zone)
}

// .google.container.v1.Operation.Type operation_type = 3;
inline void Operation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::google::container::v1::Operation_Type Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.operation_type)
  return static_cast< ::google::container::v1::Operation_Type >(operation_type_);
}
inline void Operation::set_operation_type(::google::container::v1::Operation_Type value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.operation_type)
}

// .google.container.v1.Operation.Status status = 4;
inline void Operation::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status)
  return static_cast< ::google::container::v1::Operation_Status >(status_);
}
inline void Operation::set_status(::google::container::v1::Operation_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status)
}

// string detail = 8;
inline void Operation::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::detail() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.detail)
  return detail_.GetNoArena();
}
inline void Operation::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.detail)
}
inline void Operation::set_detail(const char* value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.detail)
}
inline void Operation::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.detail)
}
inline ::std::string* Operation::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_detail() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.detail)
}

// string status_message = 5;
inline void Operation::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status_message)
  return status_message_.GetNoArena();
}
inline void Operation::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status_message)
}
inline void Operation::set_status_message(const char* value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.status_message)
}
inline void Operation::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.status_message)
}
inline ::std::string* Operation::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.status_message)
}

// string self_link = 6;
inline void Operation::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.self_link)
  return self_link_.GetNoArena();
}
inline void Operation::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.self_link)
}
inline void Operation::set_self_link(const char* value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.self_link)
}
inline void Operation::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.self_link)
}
inline ::std::string* Operation::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.self_link)
}

// string target_link = 7;
inline void Operation::clear_target_link() {
  target_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::target_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.target_link)
  return target_link_.GetNoArena();
}
inline void Operation::set_target_link(const ::std::string& value) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.target_link)
}
inline void Operation::set_target_link(const char* value) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.target_link)
}
inline void Operation::set_target_link(const char* value, size_t size) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.target_link)
}
inline ::std::string* Operation::mutable_target_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.target_link)
  return target_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_target_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.target_link)
  
  return target_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_target_link(::std::string* target_link) {
  if (target_link != NULL) {
    
  } else {
    
  }
  target_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.target_link)
}

// -------------------------------------------------------------------

// CreateClusterRequest

// string project_id = 1;
inline void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.project_id)
}
inline void CreateClusterRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.project_id)
}
inline void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.project_id)
}
inline ::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.project_id)
}

// string zone = 2;
inline void CreateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void CreateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.zone)
}
inline void CreateClusterRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.zone)
}
inline void CreateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.zone)
}
inline ::std::string* CreateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.zone)
}

// .google.container.v1.Cluster cluster = 3;
inline bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
inline void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
inline const ::google::container::v1::Cluster& CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::google::container::v1::Cluster::internal_default_instance();
}
inline ::google::container::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::container::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.cluster)
  return cluster_;
}
inline ::google::container::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.cluster)
  
  ::google::container::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline void CreateClusterRequest::set_allocated_cluster(::google::container::v1::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.cluster)
}

// -------------------------------------------------------------------

// GetClusterRequest

// string project_id = 1;
inline void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.project_id)
}
inline void GetClusterRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.project_id)
}
inline void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.project_id)
}
inline ::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.project_id)
}

// string zone = 2;
inline void GetClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void GetClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.zone)
}
inline void GetClusterRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.zone)
}
inline void GetClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.zone)
}
inline ::std::string* GetClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.zone)
}

// string cluster_id = 3;
inline void GetClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void GetClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.cluster_id)
}
inline void GetClusterRequest::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.cluster_id)
}
inline void GetClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.cluster_id)
}
inline ::std::string* GetClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.cluster_id)
}

// -------------------------------------------------------------------

// UpdateClusterRequest

// string project_id = 1;
inline void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.project_id)
}
inline void UpdateClusterRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.project_id)
}
inline void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.project_id)
}
inline ::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.project_id)
}

// string zone = 2;
inline void UpdateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.zone)
}
inline void UpdateClusterRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.zone)
}
inline void UpdateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.zone)
}
inline ::std::string* UpdateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.zone)
}

// string cluster_id = 3;
inline void UpdateClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline void UpdateClusterRequest::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline void UpdateClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline ::std::string* UpdateClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.cluster_id)
}

// .google.container.v1.ClusterUpdate update = 4;
inline bool UpdateClusterRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
inline void UpdateClusterRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) delete update_;
  update_ = NULL;
}
inline const ::google::container::v1::ClusterUpdate& UpdateClusterRequest::update() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.update)
  return update_ != NULL ? *update_
                         : *::google::container::v1::ClusterUpdate::internal_default_instance();
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::mutable_update() {
  
  if (update_ == NULL) {
    update_ = new ::google::container::v1::ClusterUpdate;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.update)
  return update_;
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.update)
  
  ::google::container::v1::ClusterUpdate* temp = update_;
  update_ = NULL;
  return temp;
}
inline void UpdateClusterRequest::set_allocated_update(::google::container::v1::ClusterUpdate* update) {
  delete update_;
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.update)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string project_id = 1;
inline void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.project_id)
}
inline void DeleteClusterRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.project_id)
}
inline void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.project_id)
}
inline ::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.project_id)
}

// string zone = 2;
inline void DeleteClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void DeleteClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.zone)
}
inline void DeleteClusterRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.zone)
}
inline void DeleteClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.zone)
}
inline ::std::string* DeleteClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.zone)
}

// string cluster_id = 3;
inline void DeleteClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline void DeleteClusterRequest::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline void DeleteClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline ::std::string* DeleteClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.cluster_id)
}

// -------------------------------------------------------------------

// ListClustersRequest

// string project_id = 1;
inline void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.project_id)
}
inline void ListClustersRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.project_id)
}
inline void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.project_id)
}
inline ::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.project_id)
}

// string zone = 2;
inline void ListClustersRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.zone)
  return zone_.GetNoArena();
}
inline void ListClustersRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.zone)
}
inline void ListClustersRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.zone)
}
inline void ListClustersRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.zone)
}
inline ::std::string* ListClustersRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.zone)
}

// -------------------------------------------------------------------

// ListClustersResponse

// repeated .google.container.v1.Cluster clusters = 1;
inline int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
inline void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
inline const ::google::container::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
inline ::google::container::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
inline ::google::container::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.clusters)
  return clusters_;
}

// repeated string missing_zones = 2;
inline int ListClustersResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListClustersResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListClustersResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListClustersResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListClustersResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
inline void ListClustersResponse::set_missing_zones(int index, const char* value) {
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline ::std::string* ListClustersResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListClustersResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::add_missing_zones(const char* value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListClustersResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListClustersResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetOperationRequest

// string project_id = 1;
inline void GetOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.project_id)
}
inline void GetOperationRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.project_id)
}
inline void GetOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.project_id)
}
inline ::std::string* GetOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.project_id)
}

// string zone = 2;
inline void GetOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.zone)
  return zone_.GetNoArena();
}
inline void GetOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.zone)
}
inline void GetOperationRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.zone)
}
inline void GetOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.zone)
}
inline ::std::string* GetOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.zone)
}

// string operation_id = 3;
inline void GetOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void GetOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.operation_id)
}
inline void GetOperationRequest::set_operation_id(const char* value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.operation_id)
}
inline void GetOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.operation_id)
}
inline ::std::string* GetOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.operation_id)
}

// -------------------------------------------------------------------

// ListOperationsRequest

// string project_id = 1;
inline void ListOperationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListOperationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.project_id)
}
inline void ListOperationsRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.project_id)
}
inline void ListOperationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.project_id)
}
inline ::std::string* ListOperationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.project_id)
}

// string zone = 2;
inline void ListOperationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.zone)
  return zone_.GetNoArena();
}
inline void ListOperationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.zone)
}
inline void ListOperationsRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.zone)
}
inline void ListOperationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.zone)
}
inline ::std::string* ListOperationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.zone)
}

// -------------------------------------------------------------------

// ListOperationsResponse

// repeated .google.container.v1.Operation operations = 1;
inline int ListOperationsResponse::operations_size() const {
  return operations_.size();
}
inline void ListOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline const ::google::container::v1::Operation& ListOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.operations)
  return operations_.Get(index);
}
inline ::google::container::v1::Operation* ListOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::google::container::v1::Operation* ListOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.operations)
  return operations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
ListOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.operations)
  return &operations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
ListOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.operations)
  return operations_;
}

// repeated string missing_zones = 2;
inline int ListOperationsResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListOperationsResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListOperationsResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListOperationsResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListOperationsResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
inline void ListOperationsResponse::set_missing_zones(int index, const char* value) {
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline ::std::string* ListOperationsResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListOperationsResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::add_missing_zones(const char* value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListOperationsResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListOperationsResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetServerConfigRequest

// string project_id = 1;
inline void GetServerConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetServerConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.project_id)
}
inline void GetServerConfigRequest::set_project_id(const char* value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.project_id)
}
inline void GetServerConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.project_id)
}
inline ::std::string* GetServerConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.project_id)
}

// string zone = 2;
inline void GetServerConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.zone)
  return zone_.GetNoArena();
}
inline void GetServerConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.zone)
}
inline void GetServerConfigRequest::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.zone)
}
inline void GetServerConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.zone)
}
inline ::std::string* GetServerConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.zone)
}

// -------------------------------------------------------------------

// ServerConfig

// string default_cluster_version = 1;
inline void ServerConfig::clear_default_cluster_version() {
  default_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig::default_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.GetNoArena();
}
inline void ServerConfig::set_default_cluster_version(const ::std::string& value) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_cluster_version)
}
inline void ServerConfig::set_default_cluster_version(const char* value) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_cluster_version)
}
inline void ServerConfig::set_default_cluster_version(const char* value, size_t size) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_cluster_version)
}
inline ::std::string* ServerConfig::mutable_default_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_default_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_cluster_version)
  
  return default_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_default_cluster_version(::std::string* default_cluster_version) {
  if (default_cluster_version != NULL) {
    
  } else {
    
  }
  default_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_cluster_version)
}

// repeated string valid_node_versions = 3;
inline int ServerConfig::valid_node_versions_size() const {
  return valid_node_versions_.size();
}
inline void ServerConfig::clear_valid_node_versions() {
  valid_node_versions_.Clear();
}
inline const ::std::string& ServerConfig::valid_node_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_node_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Mutable(index);
}
inline void ServerConfig::set_valid_node_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(value);
}
inline void ServerConfig::set_valid_node_versions(int index, const char* value) {
  valid_node_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::set_valid_node_versions(int index, const char* value, size_t size) {
  valid_node_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline ::std::string* ServerConfig::add_valid_node_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Add();
}
inline void ServerConfig::add_valid_node_versions(const ::std::string& value) {
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::add_valid_node_versions(const char* value) {
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::add_valid_node_versions(const char* value, size_t size) {
  valid_node_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_node_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_node_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_node_versions)
  return &valid_node_versions_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace container
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::container::v1::Cluster_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Cluster_Status>() {
  return ::google::container::v1::Cluster_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Status>() {
  return ::google::container::v1::Operation_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Type>() {
  return ::google::container::v1::Operation_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
