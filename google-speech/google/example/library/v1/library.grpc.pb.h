// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: google/example/library/v1/library.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fexample_2flibrary_2fv1_2flibrary_2eproto__INCLUDED
#define GRPC_google_2fexample_2flibrary_2fv1_2flibrary_2eproto__INCLUDED

#include "google/example/library/v1/library.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace example {
namespace library {
namespace v1 {

// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named `shelves/*`
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `shelves/*/books/*`
class LibraryService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a shelf, and returns the new Shelf.
    virtual ::grpc::Status CreateShelf(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::google::example::library::v1::Shelf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>> AsyncCreateShelf(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>>(AsyncCreateShelfRaw(context, request, cq));
    }
    // Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status GetShelf(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::google::example::library::v1::Shelf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>> AsyncGetShelf(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>>(AsyncGetShelfRaw(context, request, cq));
    }
    // Lists shelves. The order is unspecified but deterministic. Newly created
    // shelves will not necessarily be added to the end of this list.
    virtual ::grpc::Status ListShelves(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::google::example::library::v1::ListShelvesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListShelvesResponse>> AsyncListShelves(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListShelvesResponse>>(AsyncListShelvesRaw(context, request, cq));
    }
    // Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status DeleteShelf(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteShelf(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteShelfRaw(context, request, cq));
    }
    // Merges two shelves by adding all books from the shelf named
    // `other_shelf_name` to shelf `name`, and deletes
    // `other_shelf_name`. Returns the updated shelf.
    // The book ids of the moved books may not be the same as the original books.
    //
    // Returns NOT_FOUND if either shelf does not exist.
    // This call is a no-op if the specified shelves are the same.
    virtual ::grpc::Status MergeShelves(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::google::example::library::v1::Shelf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>> AsyncMergeShelves(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>>(AsyncMergeShelvesRaw(context, request, cq));
    }
    // Creates a book, and returns the new Book.
    virtual ::grpc::Status CreateBook(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::google::example::library::v1::Book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>> AsyncCreateBook(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>>(AsyncCreateBookRaw(context, request, cq));
    }
    // Gets a book. Returns NOT_FOUND if the book does not exist.
    virtual ::grpc::Status GetBook(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::google::example::library::v1::Book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>> AsyncGetBook(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>>(AsyncGetBookRaw(context, request, cq));
    }
    // Lists books in a shelf. The order is unspecified but deterministic. Newly
    // created books will not necessarily be added to the end of this list.
    // Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status ListBooks(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::google::example::library::v1::ListBooksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListBooksResponse>> AsyncListBooks(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListBooksResponse>>(AsyncListBooksRaw(context, request, cq));
    }
    // Deletes a book. Returns NOT_FOUND if the book does not exist.
    virtual ::grpc::Status DeleteBook(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteBook(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteBookRaw(context, request, cq));
    }
    // Updates a book. Returns INVALID_ARGUMENT if the name of the book
    // is non-empty and does equal the previous name.
    virtual ::grpc::Status UpdateBook(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::google::example::library::v1::Book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>> AsyncUpdateBook(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>>(AsyncUpdateBookRaw(context, request, cq));
    }
    // Moves a book to another shelf, and returns the new book. The book
    // id of the new book may not be the same as the original book.
    virtual ::grpc::Status MoveBook(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::google::example::library::v1::Book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>> AsyncMoveBook(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>>(AsyncMoveBookRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>* AsyncCreateShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>* AsyncGetShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListShelvesResponse>* AsyncListShelvesRaw(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Shelf>* AsyncMergeShelvesRaw(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>* AsyncCreateBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::ListBooksResponse>* AsyncListBooksRaw(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>* AsyncUpdateBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::example::library::v1::Book>* AsyncMoveBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateShelf(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::google::example::library::v1::Shelf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>> AsyncCreateShelf(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>>(AsyncCreateShelfRaw(context, request, cq));
    }
    ::grpc::Status GetShelf(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::google::example::library::v1::Shelf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>> AsyncGetShelf(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>>(AsyncGetShelfRaw(context, request, cq));
    }
    ::grpc::Status ListShelves(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::google::example::library::v1::ListShelvesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListShelvesResponse>> AsyncListShelves(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListShelvesResponse>>(AsyncListShelvesRaw(context, request, cq));
    }
    ::grpc::Status DeleteShelf(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteShelf(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteShelfRaw(context, request, cq));
    }
    ::grpc::Status MergeShelves(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::google::example::library::v1::Shelf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>> AsyncMergeShelves(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>>(AsyncMergeShelvesRaw(context, request, cq));
    }
    ::grpc::Status CreateBook(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::google::example::library::v1::Book* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>> AsyncCreateBook(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>>(AsyncCreateBookRaw(context, request, cq));
    }
    ::grpc::Status GetBook(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::google::example::library::v1::Book* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>> AsyncGetBook(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>>(AsyncGetBookRaw(context, request, cq));
    }
    ::grpc::Status ListBooks(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::google::example::library::v1::ListBooksResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListBooksResponse>> AsyncListBooks(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListBooksResponse>>(AsyncListBooksRaw(context, request, cq));
    }
    ::grpc::Status DeleteBook(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::google::protobuf::Empty* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteBook(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteBookRaw(context, request, cq));
    }
    ::grpc::Status UpdateBook(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::google::example::library::v1::Book* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>> AsyncUpdateBook(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>>(AsyncUpdateBookRaw(context, request, cq));
    }
    ::grpc::Status MoveBook(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::google::example::library::v1::Book* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>> AsyncMoveBook(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>>(AsyncMoveBookRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>* AsyncCreateShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::CreateShelfRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>* AsyncGetShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::GetShelfRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListShelvesResponse>* AsyncListShelvesRaw(::grpc::ClientContext* context, const ::google::example::library::v1::ListShelvesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteShelfRaw(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteShelfRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Shelf>* AsyncMergeShelvesRaw(::grpc::ClientContext* context, const ::google::example::library::v1::MergeShelvesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>* AsyncCreateBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::CreateBookRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::GetBookRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::ListBooksResponse>* AsyncListBooksRaw(::grpc::ClientContext* context, const ::google::example::library::v1::ListBooksRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::DeleteBookRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>* AsyncUpdateBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::UpdateBookRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::google::example::library::v1::Book>* AsyncMoveBookRaw(::grpc::ClientContext* context, const ::google::example::library::v1::MoveBookRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateShelf_;
    const ::grpc::RpcMethod rpcmethod_GetShelf_;
    const ::grpc::RpcMethod rpcmethod_ListShelves_;
    const ::grpc::RpcMethod rpcmethod_DeleteShelf_;
    const ::grpc::RpcMethod rpcmethod_MergeShelves_;
    const ::grpc::RpcMethod rpcmethod_CreateBook_;
    const ::grpc::RpcMethod rpcmethod_GetBook_;
    const ::grpc::RpcMethod rpcmethod_ListBooks_;
    const ::grpc::RpcMethod rpcmethod_DeleteBook_;
    const ::grpc::RpcMethod rpcmethod_UpdateBook_;
    const ::grpc::RpcMethod rpcmethod_MoveBook_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a shelf, and returns the new Shelf.
    virtual ::grpc::Status CreateShelf(::grpc::ServerContext* context, const ::google::example::library::v1::CreateShelfRequest* request, ::google::example::library::v1::Shelf* response);
    // Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status GetShelf(::grpc::ServerContext* context, const ::google::example::library::v1::GetShelfRequest* request, ::google::example::library::v1::Shelf* response);
    // Lists shelves. The order is unspecified but deterministic. Newly created
    // shelves will not necessarily be added to the end of this list.
    virtual ::grpc::Status ListShelves(::grpc::ServerContext* context, const ::google::example::library::v1::ListShelvesRequest* request, ::google::example::library::v1::ListShelvesResponse* response);
    // Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status DeleteShelf(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteShelfRequest* request, ::google::protobuf::Empty* response);
    // Merges two shelves by adding all books from the shelf named
    // `other_shelf_name` to shelf `name`, and deletes
    // `other_shelf_name`. Returns the updated shelf.
    // The book ids of the moved books may not be the same as the original books.
    //
    // Returns NOT_FOUND if either shelf does not exist.
    // This call is a no-op if the specified shelves are the same.
    virtual ::grpc::Status MergeShelves(::grpc::ServerContext* context, const ::google::example::library::v1::MergeShelvesRequest* request, ::google::example::library::v1::Shelf* response);
    // Creates a book, and returns the new Book.
    virtual ::grpc::Status CreateBook(::grpc::ServerContext* context, const ::google::example::library::v1::CreateBookRequest* request, ::google::example::library::v1::Book* response);
    // Gets a book. Returns NOT_FOUND if the book does not exist.
    virtual ::grpc::Status GetBook(::grpc::ServerContext* context, const ::google::example::library::v1::GetBookRequest* request, ::google::example::library::v1::Book* response);
    // Lists books in a shelf. The order is unspecified but deterministic. Newly
    // created books will not necessarily be added to the end of this list.
    // Returns NOT_FOUND if the shelf does not exist.
    virtual ::grpc::Status ListBooks(::grpc::ServerContext* context, const ::google::example::library::v1::ListBooksRequest* request, ::google::example::library::v1::ListBooksResponse* response);
    // Deletes a book. Returns NOT_FOUND if the book does not exist.
    virtual ::grpc::Status DeleteBook(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteBookRequest* request, ::google::protobuf::Empty* response);
    // Updates a book. Returns INVALID_ARGUMENT if the name of the book
    // is non-empty and does equal the previous name.
    virtual ::grpc::Status UpdateBook(::grpc::ServerContext* context, const ::google::example::library::v1::UpdateBookRequest* request, ::google::example::library::v1::Book* response);
    // Moves a book to another shelf, and returns the new book. The book
    // id of the new book may not be the same as the original book.
    virtual ::grpc::Status MoveBook(::grpc::ServerContext* context, const ::google::example::library::v1::MoveBookRequest* request, ::google::example::library::v1::Book* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateShelf() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShelf(::grpc::ServerContext* context, const ::google::example::library::v1::CreateShelfRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateShelf(::grpc::ServerContext* context, ::google::example::library::v1::CreateShelfRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Shelf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetShelf() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShelf(::grpc::ServerContext* context, const ::google::example::library::v1::GetShelfRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShelf(::grpc::ServerContext* context, ::google::example::library::v1::GetShelfRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Shelf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListShelves : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListShelves() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListShelves() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListShelves(::grpc::ServerContext* context, const ::google::example::library::v1::ListShelvesRequest* request, ::google::example::library::v1::ListShelvesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListShelves(::grpc::ServerContext* context, ::google::example::library::v1::ListShelvesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::ListShelvesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteShelf() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteShelf(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteShelfRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteShelf(::grpc::ServerContext* context, ::google::example::library::v1::DeleteShelfRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MergeShelves : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MergeShelves() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MergeShelves() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeShelves(::grpc::ServerContext* context, const ::google::example::library::v1::MergeShelvesRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeShelves(::grpc::ServerContext* context, ::google::example::library::v1::MergeShelvesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Shelf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateBook() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBook(::grpc::ServerContext* context, const ::google::example::library::v1::CreateBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBook(::grpc::ServerContext* context, ::google::example::library::v1::CreateBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBook() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* context, const ::google::example::library::v1::GetBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBook(::grpc::ServerContext* context, ::google::example::library::v1::GetBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListBooks() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListBooks() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBooks(::grpc::ServerContext* context, const ::google::example::library::v1::ListBooksRequest* request, ::google::example::library::v1::ListBooksResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBooks(::grpc::ServerContext* context, ::google::example::library::v1::ListBooksRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::ListBooksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteBook() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBook(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteBookRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBook(::grpc::ServerContext* context, ::google::example::library::v1::DeleteBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateBook() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBook(::grpc::ServerContext* context, const ::google::example::library::v1::UpdateBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBook(::grpc::ServerContext* context, ::google::example::library::v1::UpdateBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MoveBook() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_MoveBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBook(::grpc::ServerContext* context, const ::google::example::library::v1::MoveBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveBook(::grpc::ServerContext* context, ::google::example::library::v1::MoveBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::example::library::v1::Book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateShelf<WithAsyncMethod_GetShelf<WithAsyncMethod_ListShelves<WithAsyncMethod_DeleteShelf<WithAsyncMethod_MergeShelves<WithAsyncMethod_CreateBook<WithAsyncMethod_GetBook<WithAsyncMethod_ListBooks<WithAsyncMethod_DeleteBook<WithAsyncMethod_UpdateBook<WithAsyncMethod_MoveBook<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateShelf() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateShelf(::grpc::ServerContext* context, const ::google::example::library::v1::CreateShelfRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetShelf() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShelf(::grpc::ServerContext* context, const ::google::example::library::v1::GetShelfRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListShelves : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListShelves() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListShelves() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListShelves(::grpc::ServerContext* context, const ::google::example::library::v1::ListShelvesRequest* request, ::google::example::library::v1::ListShelvesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteShelf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteShelf() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteShelf() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteShelf(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteShelfRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MergeShelves : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MergeShelves() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MergeShelves() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeShelves(::grpc::ServerContext* context, const ::google::example::library::v1::MergeShelvesRequest* request, ::google::example::library::v1::Shelf* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateBook() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBook(::grpc::ServerContext* context, const ::google::example::library::v1::CreateBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBook() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* context, const ::google::example::library::v1::GetBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListBooks() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListBooks() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBooks(::grpc::ServerContext* context, const ::google::example::library::v1::ListBooksRequest* request, ::google::example::library::v1::ListBooksResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteBook() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBook(::grpc::ServerContext* context, const ::google::example::library::v1::DeleteBookRequest* request, ::google::protobuf::Empty* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateBook() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBook(::grpc::ServerContext* context, const ::google::example::library::v1::UpdateBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MoveBook() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_MoveBook() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveBook(::grpc::ServerContext* context, const ::google::example::library::v1::MoveBookRequest* request, ::google::example::library::v1::Book* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace v1
}  // namespace library
}  // namespace example
}  // namespace google


#endif  // GRPC_google_2fexample_2flibrary_2fv1_2flibrary_2eproto__INCLUDED
